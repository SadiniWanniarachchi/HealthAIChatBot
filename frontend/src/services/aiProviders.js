// Gemini AI Service - Primary AI provider for health consultations

export class GeminiService {
    constructor(apiKey) {
        this.apiKey = apiKey;
        this.baseURL = 'https://generativelanguage.googleapis.com/v1beta';
    }

    async sendMessage(messages) {
        try {
            // Convert OpenAI format messages to Gemini format
            const conversationText = messages
                .filter(msg => msg.role !== 'system') // Handle system message separately
                .map(msg => {
                    if (msg.role === 'user') {
                        return `Human: ${msg.content}`;
                    } else {
                        return `Assistant: ${msg.content}`;
                    }
                }).join('\n\n');

            // Add system instructions to the prompt
            const systemMessage = messages.find(msg => msg.role === 'system');
            const fullPrompt = systemMessage
                ? `${systemMessage.content}\n\n${conversationText}\n\nAssistant:`
                : `${conversationText}\n\nAssistant:`;

            const requestBody = {
                contents: [{
                    parts: [{ text: fullPrompt }]
                }],
                generationConfig: {
                    temperature: 0.7,
                    maxOutputTokens: 1000
                }
            };

            // Try different model names in order of preference
            const modelNames = [
                'gemini-1.5-pro',
                'gemini-1.5-flash'
            ];

            let lastError = null;

            for (const modelName of modelNames) {
                try {
                    console.log(`Frontend: Trying Gemini model: ${modelName}`);
                    const response = await fetch(`${this.baseURL}/models/${modelName}:generateContent?key=${this.apiKey}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(requestBody)
                    });

                    if (!response.ok) {
                        const errorData = await response.json();
                        console.warn(`Frontend: Model ${modelName} failed:`, errorData.error?.message);
                        lastError = new Error(`Gemini API Error with ${modelName}: ${errorData.error?.message || response.statusText}`);
                        continue; // Try next model
                    }

                    const data = await response.json();

                    if (!data.candidates || data.candidates.length === 0) {
                        console.warn(`Frontend: Model ${modelName} returned no candidates`);
                        lastError = new Error(`No response generated by ${modelName}`);
                        continue; // Try next model
                    }

                    const candidate = data.candidates[0];
                    if (candidate.finishReason === 'SAFETY') {
                        return "I understand you're looking for health guidance. Let me provide some general information while recommending you consult with a healthcare provider for personalized advice.";
                    }

                    console.log(`Frontend: Successfully used Gemini model: ${modelName}`);
                    return candidate.content.parts[0].text;

                } catch (error) {
                    console.warn(`Frontend: Error with model ${modelName}:`, error.message);
                    lastError = error;
                    continue; // Try next model
                }
            }

            // If all models failed, throw the last error
            throw lastError || new Error('All Gemini models failed');

        } catch (error) {
            console.error('Frontend: Gemini Service Error:', error);
            throw error;
        }
    }

    async generateHealthAssessment(symptoms, userInfo, conversationHistory) {
        try {
            const assessmentPrompt = `As a professional AI health assistant, provide a comprehensive health consultation summary.

User Profile:
- Age: ${userInfo.age}
- Gender: ${userInfo.gender}

Conversation History:
${conversationHistory.map(msg => `${msg.sender}: ${msg.message}`).join('\n')}

Please provide:
1. **Summary of Symptoms**: Brief overview of what the user has described
2. **Key Observations**: Important points from our conversation
3. **General Recommendations**: General health advice (not medical diagnosis)
4. **Next Steps**: What the user should consider doing
5. **Urgency Assessment**: How urgent this seems (low/medium/high/emergency)

IMPORTANT: Always emphasize this is informational only and recommend consulting healthcare providers.

Format your response as a comprehensive health consultation summary.`;

            const response = await this.sendMessage([
                { role: 'user', content: assessmentPrompt }
            ]);

            // Parse urgency level from response
            let urgencyLevel = 'medium';
            const responseText = response.toLowerCase();
            if (responseText.includes('emergency') || responseText.includes('urgent')) {
                urgencyLevel = 'emergency';
            } else if (responseText.includes('high priority') || responseText.includes('see doctor soon')) {
                urgencyLevel = 'high';
            } else if (responseText.includes('low priority') || responseText.includes('monitor')) {
                urgencyLevel = 'low';
            }

            return {
                assessment: response,
                confidence: 85,
                recommendations: [
                    "Schedule an appointment with a healthcare provider",
                    "Keep track of your symptoms and any changes",
                    "Follow up if symptoms persist or worsen",
                    "Maintain healthy lifestyle practices"
                ],
                urgencyLevel: urgencyLevel
            };
        } catch (error) {
            console.error('Frontend: Gemini Assessment Error:', error);
            throw error;
        }
    }
}

// Factory function to create Gemini AI service
export function createAIService() {
    const geminiKey = import.meta.env.VITE_GEMINI_API_KEY;

    if (!geminiKey || geminiKey === 'your_gemini_api_key_here') {
        throw new Error('VITE_GEMINI_API_KEY environment variable is not set or invalid. Please check your .env file.');
    }

    console.log('Frontend: Using Gemini AI service');
    return new GeminiService(geminiKey);
}