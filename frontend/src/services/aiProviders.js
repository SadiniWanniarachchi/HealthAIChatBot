// Alternative AI Services - You can choose your preferred provider

export class OpenAIService {
    constructor(apiKey) {
        this.apiKey = apiKey;
        this.baseURL = 'https://api.openai.com/v1';
    }

    async sendMessage(messages) {
        try {
            const response = await fetch(`${this.baseURL}/chat/completions`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${this.apiKey}`
                },
                body: JSON.stringify({
                    model: 'gpt-3.5-turbo',
                    messages: messages,
                    max_tokens: 1000,
                    temperature: 0.7,
                    frequency_penalty: 0.3,
                    presence_penalty: 0.3
                })
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(`OpenAI API Error: ${errorData.error?.message || response.statusText}`);
            }

            const data = await response.json();

            if (!data.choices || data.choices.length === 0) {
                throw new Error('No response generated by OpenAI');
            }

            return data.choices[0].message.content;
        } catch (error) {
            console.error('OpenAI Service Error:', error);
            throw error;
        }
    }

    async generateHealthAssessment(symptoms, userInfo, conversationHistory) {
        try {
            const assessmentPrompt = `As a professional AI health assistant, provide a comprehensive health consultation summary based on the conversation below.

User Profile:
- Age: ${userInfo.age}
- Gender: ${userInfo.gender}

Conversation History:
${conversationHistory.map(msg => `${msg.sender}: ${msg.message}`).join('\n')}

Please provide:
1. **Summary of Symptoms**: Brief overview of what the user has described
2. **Key Observations**: Important points from our conversation
3. **General Recommendations**: General health advice (not medical diagnosis)
4. **Next Steps**: What the user should consider doing
5. **Urgency Assessment**: How urgent this seems (low/medium/high/emergency)

IMPORTANT: Always emphasize this is informational only and recommend consulting healthcare providers.

Format your response as a comprehensive health consultation summary.`;

            const messages = [
                { role: 'system', content: 'You are a professional AI health assistant providing consultation summaries. Always emphasize that your advice is informational only and users should consult healthcare providers.' },
                { role: 'user', content: assessmentPrompt }
            ];

            const response = await this.sendMessage(messages);

            // Parse urgency level from response
            let urgencyLevel = 'medium';
            if (response.toLowerCase().includes('emergency') || response.toLowerCase().includes('urgent')) {
                urgencyLevel = 'emergency';
            } else if (response.toLowerCase().includes('high priority')) {
                urgencyLevel = 'high';
            } else if (response.toLowerCase().includes('low priority')) {
                urgencyLevel = 'low';
            }

            return {
                assessment: response,
                confidence: 90,
                recommendations: [
                    "Schedule an appointment with a healthcare provider",
                    "Keep track of your symptoms and any changes",
                    "Follow up if symptoms persist or worsen",
                    "Maintain healthy lifestyle practices"
                ],
                urgencyLevel: urgencyLevel
            };
        } catch (error) {
            console.error('OpenAI Assessment Error:', error);
            throw error;
        }
    }
}

export class GeminiService {
    constructor(apiKey) {
        this.apiKey = apiKey;
        this.baseURL = 'https://generativelanguage.googleapis.com/v1beta';
    }

    async sendMessage(messages) {
        try {
            // Convert OpenAI format messages to Gemini format
            const conversationText = messages
                .filter(msg => msg.role !== 'system') // Handle system message separately
                .map(msg => {
                    if (msg.role === 'user') {
                        return `Human: ${msg.content}`;
                    } else {
                        return `Assistant: ${msg.content}`;
                    }
                }).join('\n\n');

            // Add system instructions to the prompt
            const systemMessage = messages.find(msg => msg.role === 'system');
            const fullPrompt = systemMessage
                ? `${systemMessage.content}\n\n${conversationText}\n\nAssistant:`
                : `${conversationText}\n\nAssistant:`;

            const requestBody = {
                contents: [{
                    parts: [{ text: fullPrompt }]
                }],
                generationConfig: {
                    temperature: 0.7,
                    maxOutputTokens: 1000
                }
            };

            // Try different model names in order of preference
            const modelNames = [
                'gemini-1.5-flash',
                'gemini-1.5-pro',
                'gemini-pro'
            ];

            let lastError = null;

            for (const modelName of modelNames) {
                try {
                    console.log(`Trying Gemini model: ${modelName}`);
                    const response = await fetch(`${this.baseURL}/models/${modelName}:generateContent?key=${this.apiKey}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(requestBody)
                    });

                    if (!response.ok) {
                        const errorData = await response.json();
                        console.warn(`Model ${modelName} failed:`, errorData.error?.message);
                        lastError = new Error(`Gemini API Error with ${modelName}: ${errorData.error?.message || response.statusText}`);
                        continue; // Try next model
                    }

                    const data = await response.json();

                    if (!data.candidates || data.candidates.length === 0) {
                        console.warn(`Model ${modelName} returned no candidates`);
                        lastError = new Error(`No response generated by ${modelName}`);
                        continue; // Try next model
                    }

                    const candidate = data.candidates[0];
                    if (candidate.finishReason === 'SAFETY') {
                        return "I understand you're looking for health guidance. Let me provide some general information while recommending you consult with a healthcare provider for personalized advice.";
                    }

                    console.log(`Successfully used Gemini model: ${modelName}`);
                    return candidate.content.parts[0].text;

                } catch (error) {
                    console.warn(`Error with model ${modelName}:`, error.message);
                    lastError = error;
                    continue; // Try next model
                }
            }

            // If all models failed, throw the last error
            throw lastError || new Error('All Gemini models failed');

        } catch (error) {
            console.error('Gemini Service Error:', error);
            throw error;
        }
    }

    async generateHealthAssessment(symptoms, userInfo, conversationHistory) {
        try {
            const assessmentPrompt = `As a professional AI health assistant, provide a comprehensive health consultation summary.

User Profile:
- Age: ${userInfo.age}
- Gender: ${userInfo.gender}

Conversation History:
${conversationHistory.map(msg => `${msg.sender}: ${msg.message}`).join('\n')}

Please provide:
1. **Summary of Symptoms**: Brief overview of what the user has described
2. **Key Observations**: Important points from our conversation
3. **General Recommendations**: General health advice (not medical diagnosis)
4. **Next Steps**: What the user should consider doing
5. **Urgency Assessment**: How urgent this seems (low/medium/high/emergency)

IMPORTANT: Always emphasize this is informational only and recommend consulting healthcare providers.

Format your response as a comprehensive health consultation summary.`;

            const response = await this.sendMessage([
                { role: 'user', content: assessmentPrompt }
            ]);

            // Parse urgency level from response
            let urgencyLevel = 'medium';
            const responseText = response.toLowerCase();
            if (responseText.includes('emergency') || responseText.includes('urgent')) {
                urgencyLevel = 'emergency';
            } else if (responseText.includes('high priority') || responseText.includes('see doctor soon')) {
                urgencyLevel = 'high';
            } else if (responseText.includes('low priority') || responseText.includes('monitor')) {
                urgencyLevel = 'low';
            }

            return {
                assessment: response,
                confidence: 85,
                recommendations: [
                    "Schedule an appointment with a healthcare provider",
                    "Keep track of your symptoms and any changes",
                    "Follow up if symptoms persist or worsen",
                    "Maintain healthy lifestyle practices"
                ],
                urgencyLevel: urgencyLevel
            };
        } catch (error) {
            console.error('Gemini Assessment Error:', error);
            throw error;
        }
    }
}// Mock AI Service for testing (no API key required)
export class MockAIService {
    async sendMessage(message, conversationHistory = []) {
        // Simulate API delay
        await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));

        const responses = [
            "Thank you for sharing that with me. Can you tell me more about when these symptoms started?",
            "I understand your concern. How long have you been experiencing this? Has it gotten worse recently?",
            "That's helpful information. Are there any other symptoms you've noticed along with this?",
            "Based on what you've told me, I'd recommend monitoring these symptoms. Have you tried any treatments or remedies so far?",
            "I appreciate you providing those details. It's important to track these symptoms. Have you noticed any patterns or triggers?",
            "Thank you for that information. While I can provide general guidance, I'd recommend discussing these symptoms with a healthcare provider for a proper evaluation.",
            "That sounds concerning. For symptoms like these, it's best to consult with a medical professional who can examine you properly.",
            "I understand this might be worrying. Based on our conversation, I'd suggest keeping track of your symptoms and scheduling an appointment with your doctor."
        ];

        // Simple logic to provide varied responses
        const messageCount = conversationHistory.length;
        let response = responses[messageCount % responses.length];

        // Add some context-aware responses
        if (message.toLowerCase().includes('pain')) {
            response = "I understand you're experiencing pain. Can you describe the pain - is it sharp, dull, throbbing, or burning? And on a scale of 1-10, how would you rate the intensity?";
        } else if (message.toLowerCase().includes('fever')) {
            response = "Fever can be a sign that your body is fighting an infection. Have you taken your temperature? Are you experiencing any other symptoms like chills, body aches, or fatigue?";
        } else if (message.toLowerCase().includes('headache')) {
            response = "Headaches can have various causes. How long have you had this headache? Is it throbbing, sharp, or a dull ache? Have you tried any over-the-counter pain relievers?";
        }

        return {
            message: response,
            messageType: 'text'
        };
    }

    async generateHealthAssessment(symptoms, userInfo, conversationHistory) {
        await new Promise(resolve => setTimeout(resolve, 2000));

        return {
            assessment: `Based on our conversation, I've gathered information about your health concerns. While I cannot provide a medical diagnosis, I can offer some general observations:

**Conversation Summary:**
We discussed your symptoms and health concerns. You've provided valuable information about what you're experiencing.

**General Observations:**
- It's important to monitor your symptoms
- Consider any patterns or triggers you've noticed
- Keep track of symptom progression

**Recommendations:**
- Consult with a healthcare provider for proper evaluation
- Keep a symptom diary if symptoms persist
- Seek immediate medical attention if symptoms worsen significantly`,
            confidence: 75,
            recommendations: [
                "Schedule an appointment with your primary care physician",
                "Monitor symptoms and note any changes",
                "Seek immediate care if symptoms worsen or you develop new concerning symptoms",
                "Maintain good general health practices"
            ],
            urgencyLevel: 'medium'
        };
    }
}

// Factory function to create the appropriate AI service
export function createAIService() {
    // For Vite projects, environment variables are available via import.meta.env
    const openaiKey = import.meta.env.VITE_OPENAI_API_KEY;
    const geminiKey = import.meta.env.VITE_GEMINI_API_KEY;

    if (openaiKey && openaiKey !== 'your_openai_api_key_here') {
        console.log('Using OpenAI service');
        return new OpenAIService(openaiKey);
    } else if (geminiKey && geminiKey !== 'your_gemini_api_key_here') {
        console.log('Using Gemini service');
        return new GeminiService(geminiKey);
    } else {
        console.log('No AI API key found, using mock service for testing');
        return new MockAIService();
    }
}
